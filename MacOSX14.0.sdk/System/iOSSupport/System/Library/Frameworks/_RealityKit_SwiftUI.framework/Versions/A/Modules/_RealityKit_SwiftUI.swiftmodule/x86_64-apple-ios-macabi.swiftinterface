// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.123.203 clang-1500.0.37.1)
// swift-module-flags: -target x86_64-apple-ios17.0-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-concurrency -module-name _RealityKit_SwiftUI
// swift-module-flags-ignorable: -enable-experimental-feature ModuleInterfaceExportAs -enable-bare-slash-regex -user-module-version 225.613.1
import Darwin
import Foundation
@_exported import RealityKit
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import simd
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@usableFromInline
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
internal struct REAngleF {
  public init(radians: Swift.Float)
  public init(degrees: Swift.Float)
  public var radians: Swift.Float
  @inlinable public var degrees: Swift.Float {
    get {
            return radians * 180 / .pi
        }
    set {
            radians = newValue * .pi / 180
        }
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@usableFromInline
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
internal enum RotationOrder : Swift.UInt8 {
  public static let `default`: _RealityKit_SwiftUI.RotationOrder
  public static let sceneKit: _RealityKit_SwiftUI.RotationOrder
  case xyz
  case yzx
  case zxy
  case xzy
  case yxz
  case zyx
  @usableFromInline
  internal init?(rawValue: Swift.UInt8)
  @usableFromInline
  internal typealias RawValue = Swift.UInt8
  @usableFromInline
  internal var rawValue: Swift.UInt8 {
    @usableFromInline
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension simd.simd_quatf {
  @usableFromInline
  internal init(eulerAngles: Swift.SIMD3<Swift.Float>, order: _RealityKit_SwiftUI.RotationOrder = .default)
}
@usableFromInline
internal typealias REMatrix2x2F = simd.simd_float2x2
@usableFromInline
internal typealias REMatrix3x3F = simd.simd_float3x3
@usableFromInline
internal typealias REMatrix4x4F = simd.simd_float4x4
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension simd.simd_float3x3 {
  @inlinable internal init(_ matrix: _RealityKit_SwiftUI.REMatrix4x4F) {
        self = REMatrix3x3F(columns: (matrix[0]._xyz, matrix[1]._xyz, matrix[2]._xyz))
    }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension simd.simd_float4x4 {
  @inlinable internal static var identity: _RealityKit_SwiftUI.REMatrix4x4F {
    get { return REMatrix4x4F( diagonal: SIMD4<Float>(repeating: 1.0)) }
  }
  @inlinable internal init(rows: (Swift.SIMD4<Swift.Float>, Swift.SIMD4<Swift.Float>, Swift.SIMD4<Swift.Float>, Swift.SIMD4<Swift.Float>)) {
        self = simd_matrix_from_rows(rows.0, rows.1, rows.2, rows.3)
    }
  @inlinable internal init(rows r: ((Swift.Float, Swift.Float, Swift.Float, Swift.Float), (Swift.Float, Swift.Float, Swift.Float, Swift.Float), (Swift.Float, Swift.Float, Swift.Float, Swift.Float), (Swift.Float, Swift.Float, Swift.Float, Swift.Float))) {
        self = simd_matrix_from_rows(SIMD4<Float>(r.0.0, r.0.1, r.0.2, r.0.3),
                                     SIMD4<Float>(r.1.0, r.1.1, r.1.2, r.1.3),
                                     SIMD4<Float>(r.2.0, r.2.1, r.2.2, r.2.3),
                                     SIMD4<Float>(r.3.0, r.3.1, r.3.2, r.3.3))
    }
  @inlinable internal init(translation t: Swift.SIMD3<Swift.Float>) {
        self.init(columns: (SIMD4<Float>(1, 0, 0, 0),
                            SIMD4<Float>(0, 1, 0, 0),
                            SIMD4<Float>(0, 0, 1, 0),
                            SIMD4<Float>(t.x, t.y, t.z, 1)))
    }
  @inlinable internal init(scale s: Swift.SIMD3<Swift.Float>) {
        self.init(diagonal: SIMD4<Float>(s.x, s.y, s.z, 1))
    }
  @inlinable internal init(rotation: simd.simd_quatf) {
        self = simd_matrix4x4(rotation)
    }
  @inlinable internal init(translation: Swift.SIMD3<Swift.Float>, rotation: simd.simd_quatf, scale: Swift.SIMD3<Swift.Float>) {
        self = simd_matrix4x4(rotation)
        self.scale(scale)
        self.translate(translation)
    }
  @inlinable internal func scaled(_ scale: Swift.SIMD3<Swift.Float>) -> _RealityKit_SwiftUI.REMatrix4x4F {
        var m = self
        m.columns.0 *= scale.x
        m.columns.1 *= scale.y
        m.columns.2 *= scale.z
        return m
    }
  @inlinable internal func translated(_ trans: Swift.SIMD3<Swift.Float>) -> _RealityKit_SwiftUI.REMatrix4x4F {
        var m = self
        m.columns.3._xyz += trans
        return m
    }
  @inlinable internal mutating func scale(_ scale: Swift.SIMD3<Swift.Float>) {
        self.columns.0 *= scale.x
        self.columns.1 *= scale.y
        self.columns.2 *= scale.z
    }
  @inlinable internal mutating func translate(_ trans: Swift.SIMD3<Swift.Float>) {
        self.columns.3._xyz += trans
    }
  @inlinable internal var scale: Swift.SIMD3<Swift.Float> {
    get {
            // See `Matrix4x4.extractScale()` for additional comments.
            let minor = matrix_float3x3(self)
            let sign = minor.determinant > Float(0) ? Float(1) : Float(-1)
            return sign * SIMD3<Float>(simd.length(minor.columns.0),
                                       simd.length(minor.columns.1),
                                       simd.length(minor.columns.2))
        }
    set {
            self.columns.0._xyz = simd.normalize(self.columns.0._xyz)
            self.columns.1._xyz = simd.normalize(self.columns.1._xyz)
            self.columns.2._xyz = simd.normalize(self.columns.2._xyz)
            scale(newValue)
        }
  }
  @usableFromInline
  internal var rotation: simd.simd_quatf {
    get
    set
  }
  @inlinable internal var translation: Swift.SIMD3<Swift.Float> {
    get {
            return columns.3._xyz
        }
    set {
            columns.3._xyz = newValue
        }
  }
  @inlinable internal func decompose() -> (translation: Swift.SIMD3<Swift.Float>, rotation: simd.simd_quatf, scale: Swift.SIMD3<Swift.Float>) {
        return (translation, rotation, scale)
    }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension Swift.SIMD3 where Scalar == Swift.Float {
  @usableFromInline
  internal var _xy: Swift.SIMD2<Swift.Float> {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension Swift.SIMD4 where Scalar == Swift.Float {
  @usableFromInline
  internal var _xyz: Swift.SIMD3<Swift.Float> {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension _RealityKit_SwiftUI.RotationOrder : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension _RealityKit_SwiftUI.RotationOrder : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension _RealityKit_SwiftUI.RotationOrder : Swift.RawRepresentable {}
