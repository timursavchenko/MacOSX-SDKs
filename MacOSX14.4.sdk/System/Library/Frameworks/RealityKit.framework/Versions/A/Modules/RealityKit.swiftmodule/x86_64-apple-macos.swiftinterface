// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.12.5 clang-1500.3.9.1.1)
// swift-module-flags: -target x86_64-apple-macos14.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-concurrency -enable-experimental-feature ModuleInterfaceExportAs -enable-bare-slash-regex -user-module-version 225.621 -module-name RealityKit
import AppKit
import Combine
import CoreGraphics
import Foundation
import Metal
import MultipeerConnectivity
@_exported import RealityFoundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import simd
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
@available(visionOS, unavailable)
extension RealityKit.ARView {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct PostProcessContext {
    public init(_ device: any Metal.MTLDevice, _ commandBuffer: any Metal.MTLCommandBuffer, _ sourceColorTexture: any Metal.MTLTexture, _ sourceDepthTexture: any Metal.MTLTexture, _ targetColorTexture: any Metal.MTLTexture, _ projection: simd.float4x4, _ time: Foundation.TimeInterval)
    public var device: any Metal.MTLDevice
    public var commandBuffer: any Metal.MTLCommandBuffer
    public var sourceColorTexture: any Metal.MTLTexture
    public var sourceDepthTexture: any Metal.MTLTexture
    public var targetColorTexture: any Metal.MTLTexture
    public var projection: simd.float4x4
    public var time: Foundation.TimeInterval
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct RenderCallbacks {
    public var prepareWithDevice: ((any Metal.MTLDevice) -> Swift.Void)?
    public var postProcess: ((RealityKit.ARView.PostProcessContext) -> Swift.Void)?
    public init()
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @_Concurrency.MainActor(unsafe) public var renderCallbacks: RealityKit.ARView.RenderCallbacks {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension RealityFoundation.MeshResource {
  public typealias Font = AppKit.NSFont
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension RealityFoundation.MeshResource {
  @_Concurrency.MainActor(unsafe) public static func generateText(_ string: Swift.String, extrusionDepth: Swift.Float = 0.25, font: RealityFoundation.MeshResource.Font = .systemFont(ofSize: MeshResource.Font.systemFontSize), containerFrame: CoreFoundation.CGRect = CGRect.zero, alignment: CoreText.CTTextAlignment = .left, lineBreakMode: CoreText.CTLineBreakMode = .byTruncatingTail) -> RealityFoundation.MeshResource
  @_Concurrency.MainActor(unsafe) public static func __generateText(_ string: Swift.String, extrusionDepth: Swift.Float = 0.25, font: RealityFoundation.MeshResource.Font = .systemFont(ofSize: MeshResource.Font.systemFontSize), containerFrame: CoreFoundation.CGRect = CGRect.zero, alignment: CoreText.CTTextAlignment = .left, lineBreakMode: CoreText.CTLineBreakMode = .byTruncatingTail, segmentCount: Swift.UInt8 = 6) -> RealityFoundation.MeshResource
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@available(visionOS, unavailable)
extension RealityKit.ARView {
  public struct Environment {
    public typealias Color = AppKit.NSColor
    public struct Background {
      public static func skybox(_ resource: RealityFoundation.EnvironmentResource) -> RealityKit.ARView.Environment.Background
      public static func color(_ color: RealityKit.ARView.Environment.Color) -> RealityKit.ARView.Environment.Background
    }
    public struct ImageBasedLight {
      public var resource: RealityFoundation.EnvironmentResource?
      public var intensityExponent: Swift.Float
    }
    public enum Reverb {
      public enum Preset {
        case smallRoom
        case mediumRoom
        case largeRoom
        case mediumHall
        case largeHall
        case cathedral
        public static func == (a: RealityKit.ARView.Environment.Reverb.Preset, b: RealityKit.ARView.Environment.Reverb.Preset) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noReverb
      case preset(RealityKit.ARView.Environment.Reverb.Preset)
      public static var automatic: RealityKit.ARView.Environment.Reverb {
        get
      }
    }
    public var background: RealityKit.ARView.Environment.Background
    public var lighting: RealityKit.ARView.Environment.ImageBasedLight
    public var reverb: RealityKit.ARView.Environment.Reverb
    public init(background: RealityKit.ARView.Environment.Background, lighting: RealityKit.ARView.Environment.ImageBasedLight, reverb: RealityKit.ARView.Environment.Reverb)
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
@available(visionOS, unavailable)
extension RealityKit.ARView.Environment.Reverb : Swift.Equatable, Swift.Hashable {
  public static func == (a: RealityKit.ARView.Environment.Reverb, b: RealityKit.ARView.Environment.Reverb) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, macCatalyst 16.0, *)
@available(visionOS, unavailable)
extension RealityKit.ARView.Environment.Reverb.Preset : Swift.CaseIterable {
  public typealias AllCases = [RealityKit.ARView.Environment.Reverb.Preset]
  public static var allCases: [RealityKit.ARView.Environment.Reverb.Preset] {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension RealityFoundation.PointLightComponent {
  public typealias Color = AppKit.NSColor
  public var color: RealityFoundation.PointLightComponent.Color {
    get
    set
  }
  public init(color: RealityFoundation.PointLightComponent.Color = .white, intensity: Swift.Float = 26963.76, attenuationRadius: Swift.Float = 10.0)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@available(visionOS, unavailable)
extension RealityKit.ARView {
  @_Concurrency.MainActor(unsafe) public func project(_ point: Swift.SIMD3<Swift.Float>) -> CoreFoundation.CGPoint?
  @_Concurrency.MainActor(unsafe) public func unproject(_ point: CoreFoundation.CGPoint, viewport: CoreFoundation.CGRect) -> Swift.SIMD3<Swift.Float>?
  @_Concurrency.MainActor(unsafe) public func unproject(_ point: CoreFoundation.CGPoint, ontoPlane planeTransform: simd.float4x4) -> Swift.SIMD3<Swift.Float>?
  @available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
  @_Concurrency.MainActor(unsafe) public func unproject(_ point: CoreFoundation.CGPoint, ontoPlane planeTransform: simd.float4x4, relativeToCamera: Swift.Bool) -> Swift.SIMD3<Swift.Float>?
  @_Concurrency.MainActor(unsafe) public func ray(through screenPoint: CoreFoundation.CGPoint) -> (origin: Swift.SIMD3<Swift.Float>, direction: Swift.SIMD3<Swift.Float>)?
  @_Concurrency.MainActor(unsafe) public func hitTest(_ point: CoreFoundation.CGPoint, query: RealityFoundation.CollisionCastQueryType = .all, mask: RealityFoundation.CollisionGroup = .all) -> [RealityFoundation.CollisionCastHit]
  @_Concurrency.MainActor(unsafe) public func entity(at point: CoreFoundation.CGPoint) -> RealityFoundation.Entity?
  @_Concurrency.MainActor(unsafe) public func entities(at point: CoreFoundation.CGPoint) -> [RealityFoundation.Entity]
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension RealityFoundation.SpotLightComponent {
  public typealias Color = AppKit.NSColor
  public var color: RealityFoundation.SpotLightComponent.Color {
    get
    set
  }
  public init(color: RealityFoundation.SpotLightComponent.Color = .white, intensity: Swift.Float = 6740.94, innerAngleInDegrees: Swift.Float = 45.0, outerAngleInDegrees: Swift.Float = 60.0, attenuationRadius: Swift.Float = 10.0)
}
extension RealityKit.ARView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layout()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidChangeBackingProperties()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidMoveToSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var frame: Foundation.NSRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseDown(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func rightMouseDown(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func otherMouseDown(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseUp(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func rightMouseUp(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func otherMouseUp(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseDragged(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func rightMouseDragged(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func otherMouseDragged(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseMoved(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func scrollWheel(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func makeBackingLayer() -> QuartzCore.CALayer
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var acceptsFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func keyDown(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func keyUp(with event: AppKit.NSEvent)
}
@available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
public enum AccessibilityEvents {
  public struct Activate : RealityFoundation.Event {
    public var entity: RealityFoundation.Entity
    public init(entity: RealityFoundation.Entity)
  }
  public struct Increment : RealityFoundation.Event {
    public var entity: RealityFoundation.Entity
    public init(entity: RealityFoundation.Entity)
  }
  public struct Decrement : RealityFoundation.Event {
    public var entity: RealityFoundation.Entity
    public init(entity: RealityFoundation.Entity)
  }
  public struct CustomAction : RealityFoundation.Event {
    public var key: Foundation.LocalizedStringResource
    public var entity: RealityFoundation.Entity
    public init(key: Foundation.LocalizedStringResource, entity: RealityFoundation.Entity)
  }
}
@available(macOS 14.0, iOS 17.0, macCatalyst 17.0, *)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor(unsafe) public var accessibilityLabelKey: Foundation.LocalizedStringResource? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var accessibilityValue: Foundation.LocalizedStringResource? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var accessibilityCustomContent: [RealityFoundation.AccessibilityComponent.CustomContent] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var accessibilitySystemActions: RealityFoundation.AccessibilityComponent.SupportedActions {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var accessibilityCustomActions: [Foundation.LocalizedStringResource] {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
public protocol __ARViewDelegatePrivate : AnyObject {
  func viewWillProcessTapInteraction(_ view: RealityKit.ARView)
  func view(_ view: RealityKit.ARView, performedTapInteraction: Swift.Bool, for entity: RealityFoundation.Entity?)
  @available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
  func view(_ view: RealityKit.ARView, performedProximityInteractionsForEntities: [RealityFoundation.Entity])
  func update(_ view: RealityKit.ARView, deltaTime: Swift.Float)
}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
extension RealityKit.__ARViewDelegatePrivate {
  public func view(_ view: RealityKit.ARView, performedProximityInteractionsForEntities: [RealityFoundation.Entity])
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
public typealias ARViewBase = AppKit.NSView
@objc @_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@available(visionOS, unavailable)
@_Concurrency.MainActor(unsafe) open class ARView : RealityKit.ARViewBase {
  @_Concurrency.MainActor(unsafe) public var __services: RealityFoundation.__ServiceLocator {
    get
  }
  @_Concurrency.MainActor(unsafe) public var scene: RealityFoundation.Scene {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var __delegatePrivate: (any RealityKit.__ARViewDelegatePrivate)?
  @_Concurrency.MainActor(unsafe) public var __automaticallyInvokesStartTrigger: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var debugOptions: RealityKit.ARView.DebugOptions {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var environment: RealityKit.ARView.Environment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cameraTransform: RealityFoundation.Transform {
    get
  }
  @_Concurrency.MainActor(unsafe) public var audioListener: RealityFoundation.Entity? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var __environmentEntity: RealityFoundation.Entity!
  @_Concurrency.MainActor(unsafe) public var __enableAutomaticFrameRate: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var __preferredFrameRate: Swift.Float
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder decoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required override dynamic public init(frame frameRect: Foundation.NSRect)
  @_Concurrency.MainActor(unsafe) public var __renderGraphEmitter: RealityFoundation.__RERenderGraphEmitter! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func __setWireframeMode(displayWireframe: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public var __forceLocalizedProbes: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var __parallaxBackgroundProbe: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var __targetIdentifier: Swift.UInt {
    get
  }
  @_Concurrency.MainActor(unsafe) open func __didInitializeEngine()
  @_Concurrency.MainActor(unsafe) public var __disableComposition: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var __nonARKitDevices: Swift.Bool
  @objc deinit
  @_Concurrency.MainActor(unsafe) public func __handleTapAtPoint(point: CoreFoundation.CGPoint)
  public struct DebugOptions : Swift.OptionSet {
    public let rawValue: Swift.Int
    public static let none: RealityKit.ARView.DebugOptions
    public static let showPhysics: RealityKit.ARView.DebugOptions
    public static let showStatistics: RealityKit.ARView.DebugOptions
    public init(rawValue: Swift.Int)
    public typealias ArrayLiteralElement = RealityKit.ARView.DebugOptions
    public typealias Element = RealityKit.ARView.DebugOptions
    public typealias RawValue = Swift.Int
  }
  @_Concurrency.MainActor(unsafe) public var __statisticsOptions: RealityKit.ARView.__StatisticsOptions {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func __frameProfilerAddCustomStatistic(_ statName: Swift.String, _ statValue: Swift.Float)
  @_Concurrency.MainActor(unsafe) public var __disableStatisticsRendering: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func __getStatisticsStringForSingleOption(statisticOption: RealityKit.ARView.__StatisticsOptions) -> Swift.String
  public struct __StatisticsOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    public static let frameTimeStatistics: RealityKit.ARView.__StatisticsOptions
    public static let animationStatistics: RealityKit.ARView.__StatisticsOptions
    public static let assetPipelineStatistics: RealityKit.ARView.__StatisticsOptions
    public static let audioStatistics: RealityKit.ARView.__StatisticsOptions
    public static let ecsStatistics: RealityKit.ARView.__StatisticsOptions
    public static let meshStatistics: RealityKit.ARView.__StatisticsOptions
    public static let networkStatistics: RealityKit.ARView.__StatisticsOptions
    public static let physicsStatistics: RealityKit.ARView.__StatisticsOptions
    public static let renderingStatistics: RealityKit.ARView.__StatisticsOptions
    public static let memoryStatistics: RealityKit.ARView.__StatisticsOptions
    public static let thermalStatistics: RealityKit.ARView.__StatisticsOptions
    public static let sceneUnderstandingStatistics: RealityKit.ARView.__StatisticsOptions
    public static let mtlCounterAPIStatistics: RealityKit.ARView.__StatisticsOptions
    public static let customStatistics: RealityKit.ARView.__StatisticsOptions
    public static let attributionStatistics: RealityKit.ARView.__StatisticsOptions
    public static let vfxStatistics: RealityKit.ARView.__StatisticsOptions
    public init(rawValue: Swift.UInt32)
    public typealias ArrayLiteralElement = RealityKit.ARView.__StatisticsOptions
    public typealias Element = RealityKit.ARView.__StatisticsOptions
    public typealias RawValue = Swift.UInt32
  }
  @_Concurrency.MainActor(unsafe) public func __setProfilerUpdateInterval(newInterval: Swift.Float)
  @_Concurrency.MainActor(unsafe) public func __frameTime() -> Swift.Float
  public typealias Image = AppKit.NSImage
  @_Concurrency.MainActor(unsafe) public func snapshot(saveToHDR: Swift.Bool, completion: @escaping (_ image: RealityKit.ARView.Image?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func __startAudioEngine()
  @_Concurrency.MainActor(unsafe) public func __stopAudioEngine()
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension RealityFoundation.DirectionalLightComponent {
  public typealias Color = AppKit.NSColor
  public var color: RealityFoundation.DirectionalLightComponent.Color {
    get
    set
  }
  public init(color: RealityFoundation.DirectionalLightComponent.Color = .white, intensity: Swift.Float = 2145.7078, isRealWorldProxy: Swift.Bool = false)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension RealityFoundation.TextureResource {
  @_Concurrency.MainActor(unsafe) public static func load(named name: Swift.String, in bundle: Foundation.Bundle? = nil) throws -> RealityFoundation.TextureResource
  @_Concurrency.MainActor(unsafe) public static func loadAsync(named name: Swift.String, in bundle: Foundation.Bundle? = nil) -> RealityFoundation.LoadRequest<RealityFoundation.TextureResource>
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.TextureResource {
  @_Concurrency.MainActor(unsafe) public static func load(named name: Swift.String, in bundle: Foundation.Bundle? = nil, options: RealityFoundation.TextureResource.CreateOptions) throws -> RealityFoundation.TextureResource
  @_Concurrency.MainActor(unsafe) public static func loadAsync(named name: Swift.String, in bundle: Foundation.Bundle? = nil, options: RealityFoundation.TextureResource.CreateOptions) -> RealityFoundation.LoadRequest<RealityFoundation.TextureResource>
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension MultipeerConnectivity.MCPeerID : RealityFoundation.SynchronizationPeerID {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@available(visionOS, unavailable)
public class MultipeerConnectivityService : RealityFoundation.SynchronizationService {
  final public let session: MultipeerConnectivity.MCSession
  public init(session: MultipeerConnectivity.MCSession) throws
  public func setHandshake(count: Swift.UInt32, timeoutMs: Swift.UInt32)
  @preconcurrency @_Concurrency.MainActor public func entity(for identifier: RealityKit.MultipeerConnectivityService.Identifier) -> RealityFoundation.Entity?
  @preconcurrency @_Concurrency.MainActor public func owner(of entity: RealityFoundation.Entity) -> (any RealityFoundation.SynchronizationPeerID)?
  @preconcurrency @_Concurrency.MainActor public func giveOwnership(of entity: RealityFoundation.Entity, toPeer peer: any RealityFoundation.SynchronizationPeerID) -> Swift.Bool
  public func __fromCore(peerID: RealityFoundation.__PeerIDRef) -> (any RealityFoundation.SynchronizationPeerID)?
  public func __toCore(peerID: any RealityFoundation.SynchronizationPeerID) -> RealityFoundation.__PeerIDRef
  public func startSync()
  public func stopSync()
  @objc deinit
}
@available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
extension RealityFoundation.Entity {
  @_Concurrency.MainActor(unsafe) public func __accessibilityWrappers(rootEntityWrapper: RealityKit.__EntityAccessibilityWrapper? = nil) -> [RealityKit.__EntityAccessibilityWrapper]
  @available(visionOS, unavailable)
  @_Concurrency.MainActor(unsafe) public func __calculateScreenBoundingRect(in arView: RealityKit.ARView) -> CoreFoundation.CGRect
}
@objc @_hasMissingDesignatedInitializers @available(macOS 10.15.4, iOS 13.4, macCatalyst 13.4, *)
public class __EntityAccessibilityWrapper : ObjectiveC.NSObject {
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@available(visionOS, unavailable)
extension RealityKit.ARView {
  @_Concurrency.MainActor(unsafe) public var physicsOrigin: RealityFoundation.Entity? {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension RealityFoundation.Material {
  public typealias Color = AppKit.NSColor
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension RealityFoundation.SimpleMaterial {
  @available(macOS, deprecated, deprecated: 12.0, message: "use `color` property instead")
  @available(iOS, deprecated, deprecated: 15.0, message: "use `color` property instead")
  public var tintColor: AppKit.NSColor {
    get
    set
  }
  @available(macOS, deprecated, deprecated: 12.0, message: "use `color` property instead")
  @available(iOS, deprecated, deprecated: 15.0, message: "use `color` property instead")
  public var baseColor: RealityKit.MaterialColorParameter {
    get
    set
  }
  public init(color: RealityFoundation.SimpleMaterial.Color, roughness: RealityFoundation.MaterialScalarParameter = 0.0, isMetallic: Swift.Bool)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension RealityFoundation.UnlitMaterial {
  @available(macOS, deprecated, deprecated: 12.0, message: "use `color` property instead")
  @available(iOS, deprecated, deprecated: 15.0, message: "use `color` property instead")
  public var tintColor: AppKit.NSColor {
    get
    set
  }
  @available(macOS, deprecated, deprecated: 12.0, message: "use `color` property instead")
  @available(iOS, deprecated, deprecated: 15.0, message: "use `color` property instead")
  public var baseColor: RealityKit.MaterialColorParameter {
    get
    set
  }
  public init(color: AppKit.NSColor)
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.PhysicallyBasedMaterial.BaseColor {
  public init(tint: AppKit.NSColor = .white, texture: RealityFoundation.MaterialParameters.Texture? = nil)
  public var tint: AppKit.NSColor {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.PhysicallyBasedMaterial.EmissiveColor {
  public init(color: AppKit.NSColor = .black, texture: RealityFoundation.MaterialParameters.Texture? = nil)
  public var color: AppKit.NSColor {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension RealityFoundation.PhysicallyBasedMaterial.SheenColor {
  public init(tint: AppKit.NSColor = .white, texture: RealityFoundation.MaterialParameters.Texture? = nil)
  public var tint: AppKit.NSColor {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
@available(visionOS, unavailable)
extension RealityFoundation.CustomMaterial.BaseColor {
  public init(tint: AppKit.NSColor = .white, texture: RealityFoundation.CustomMaterial.Texture? = nil)
  public var tint: AppKit.NSColor {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
@available(visionOS, unavailable)
extension RealityFoundation.CustomMaterial.EmissiveColor {
  public init(color: AppKit.NSColor = .black, texture: RealityFoundation.CustomMaterial.Texture? = nil)
  public var color: AppKit.NSColor {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
public enum MaterialColorParameter : Swift._ExpressibleByColorLiteral, Swift.Hashable {
  case color(AppKit.NSColor)
  case texture(RealityFoundation.TextureResource)
  public init(_colorLiteralRed red: Swift.Float, green: Swift.Float, blue: Swift.Float, alpha: Swift.Float)
  public static func == (lhs: RealityKit.MaterialColorParameter, rhs: RealityKit.MaterialColorParameter) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@available(visionOS, unavailable)
extension RealityKit.ARView.Environment.Reverb.Preset : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@available(visionOS, unavailable)
extension RealityKit.ARView.Environment.Reverb.Preset : Swift.Hashable {}
